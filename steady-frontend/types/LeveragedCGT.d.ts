/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LeveragedCGTInterface extends ethers.utils.Interface {
  functions: {
    "INACTIVE_THRESHOLD_DAYS()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfNoFees(address)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "calcInactiveFee(address)": FunctionFragment;
    "calcOwedFees(address)": FunctionFragment;
    "calcSendAllBalance(address)": FunctionFragment;
    "calcStorageFee(address)": FunctionFragment;
    "calcTransferFee(address,uint256)": FunctionFragment;
    "daysSinceActivity(address)": FunctionFragment;
    "daysSincePaidStorageFee(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "feeEnforcer()": FunctionFragment;
    "forcePayFees(address)": FunctionFragment;
    "getFeeAddress()": FunctionFragment;
    "getRouter()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isAllFeeExempt(address)": FunctionFragment;
    "isInactive(address)": FunctionFragment;
    "isStorageFeeExempt(address)": FunctionFragment;
    "isTransferFeeExempt(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "payStorageFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setAccountInactive(address)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "setFeeEnforcer(address)": FunctionFragment;
    "setFeeExempt(address)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setStorageFeeExempt(address)": FunctionFragment;
    "setStorageFeeGracePeriodDays(uint256)": FunctionFragment;
    "setTransferFeeBasisPoints(uint256)": FunctionFragment;
    "setTransferFeeExempt(address)": FunctionFragment;
    "simulateTransfer(address,address,uint256)": FunctionFragment;
    "storageFee(uint256,uint256)": FunctionFragment;
    "storageFeeGracePeriodDays()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFeeBasisPoints()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsetFeeExempt(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INACTIVE_THRESHOLD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfNoFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInactiveFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOwedFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSendAllBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcStorageFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTransferFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daysSinceActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "daysSincePaidStorageFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeEnforcer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forcePayFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isInactive", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStorageFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payStorageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAccountInactive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeEnforcer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStorageFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageFeeGracePeriodDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFeeBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFeeGracePeriodDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetFeeExempt",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "INACTIVE_THRESHOLD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNoFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInactiveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOwedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSendAllBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daysSinceActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daysSincePaidStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeEnforcer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forcePayFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInactive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStorageFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeEnforcer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStorageFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageFeeGracePeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storageFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storageFeeGracePeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetFeeExempt",
    data: BytesLike
  ): Result;

  events: {
    "AccountInactive(address,uint256)": EventFragment;
    "AccountReActive(address)": EventFragment;
    "AddBackedGold(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveGold(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountInactive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountReActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddBackedGold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveGold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class LeveragedCGT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LeveragedCGTInterface;

  functions: {
    INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSendAllBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeEnforcer(overrides?: CallOverrides): Promise<[string]>;

    forcePayFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    getRouter(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInactive(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      addressTo: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payStorageFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setAccountInactive(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeEnforcer(
      enforcer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simulateTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsetFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfNoFees(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcInactiveFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOwedFees(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcSendAllBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcStorageFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTransferFee(
    account: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daysSinceActivity(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daysSincePaidStorageFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeEnforcer(overrides?: CallOverrides): Promise<string>;

  forcePayFees(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeeAddress(overrides?: CallOverrides): Promise<string>;

  getRouter(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllFeeExempt(account: string, overrides?: CallOverrides): Promise<boolean>;

  isInactive(account: string, overrides?: CallOverrides): Promise<boolean>;

  isStorageFeeExempt(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferFeeExempt(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    addressTo: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payStorageFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setAccountInactive(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    newFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeEnforcer(
    enforcer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageFeeGracePeriodDays(
    daysGracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferFeeBasisPoints(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simulateTransfer(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  storageFee(
    balance: BigNumberish,
    daysSinceStoragePaid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsetFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSendAllBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeEnforcer(overrides?: CallOverrides): Promise<string>;

    forcePayFees(account: string, overrides?: CallOverrides): Promise<boolean>;

    getFeeAddress(overrides?: CallOverrides): Promise<string>;

    getRouter(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInactive(account: string, overrides?: CallOverrides): Promise<boolean>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      addressTo: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payStorageFee(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setAccountInactive(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeEnforcer(
      enforcer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeExempt(account: string, overrides?: CallOverrides): Promise<void>;

    setRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    setStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsetFeeExempt(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AccountInactive(
      account?: string | null,
      feePerYear?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; feePerYear: BigNumber }
    >;

    AccountReActive(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    AddBackedGold(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RemoveGold(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSendAllBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeEnforcer(overrides?: CallOverrides): Promise<BigNumber>;

    forcePayFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRouter(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInactive(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      addressTo: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payStorageFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setAccountInactive(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeEnforcer(
      enforcer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simulateTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsetFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INACTIVE_THRESHOLD_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSendAllBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeEnforcer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forcePayFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInactive(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      addressTo: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payStorageFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAccountInactive(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeEnforcer(
      enforcer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simulateTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storageFeeGracePeriodDays(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsetFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
