/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RootAlchemistInterface extends ethers.utils.Interface {
  functions: {
    "CGT()": FunctionFragment;
    "decimals()": FunctionFragment;
    "mergeCGT(uint256)": FunctionFragment;
    "priceFromOracle()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "splitCGT(uint256)": FunctionFragment;
    "steady()": FunctionFragment;
    "unsteady()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CGT", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mergeCGT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFromOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "splitCGT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "steady", values?: undefined): string;
  encodeFunctionData(functionFragment: "unsteady", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CGT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mergeCGT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitCGT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unsteady", data: BytesLike): Result;

  events: {
    "Merge(address,uint256,int256)": EventFragment;
    "Split(address,uint256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Merge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Split"): EventFragment;
}

export class RootAlchemist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RootAlchemistInterface;

  functions: {
    CGT(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    mergeCGT(
      cgtAmountToMerge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceFromOracle(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    splitCGT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    steady(overrides?: CallOverrides): Promise<[string]>;

    unsteady(overrides?: CallOverrides): Promise<[string]>;
  };

  CGT(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  mergeCGT(
    cgtAmountToMerge: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  splitCGT(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  steady(overrides?: CallOverrides): Promise<string>;

  unsteady(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CGT(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    mergeCGT(
      cgtAmountToMerge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    priceFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    splitCGT(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    steady(overrides?: CallOverrides): Promise<string>;

    unsteady(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Merge(
      source?: string | null,
      mergedAmount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { source: string; mergedAmount: BigNumber; price: BigNumber }
    >;

    Split(
      source?: string | null,
      splitAmount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { source: string; splitAmount: BigNumber; price: BigNumber }
    >;
  };

  estimateGas: {
    CGT(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    mergeCGT(
      cgtAmountToMerge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    splitCGT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    steady(overrides?: CallOverrides): Promise<BigNumber>;

    unsteady(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CGT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeCGT(
      cgtAmountToMerge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceFromOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    splitCGT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    steady(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unsteady(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
